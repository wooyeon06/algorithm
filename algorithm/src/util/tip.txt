1. 왠만하면 배열로쓰자..
java.util은 overflow가능성있음



2. 상태를 유지할 수 있는 경우
Top-Down  (재귀)
피보나치 수열 - 시간 복잡도는 O(2^n)
최소로해도  O(n) 

Bottom-Up (DP 테이블 - 상태저장한 for)
> 밑에 상태에서 점점 경우의 수를 더하여 나갈때

* 다이나믹 프로그래밍의 전형적인 형태는 바텀업 방식입니다.
* 탑다운 방식은, 재귀 함수를 호출하며 메모리에 적재되는 일련의 과정으로 인해 오버헤드가 발생할 수 있습니다.
* 따라서, 가능하다면 재귀 함수를 사용하는 것 보단, 반복문을 사용하는게 오버헤드를 줄일 수 있는 방법입니다

> a258705 참고



3. 기록하는 방법도 있음
ex) boolean[]


4. 큐 + for문을 이용해 재귀를 피할 수 있다
boolean[] + queue이용

좌표를 이동하며 방문할 경우 큐에 기록하며 진행할 수 있다....