1. 왠만하면 배열로쓰자..
java.util은 overflow가능성있음



2. 상태를 유지할 수 있는 경우
Top-Down  (재귀)
피보나치 수열 - 시간 복잡도는 O(2^n)
최소로해도  O(n) 

Bottom-Up (DP 테이블 - 상태저장한 for)
> 밑에 상태에서 점점 경우의 수를 더하여 나갈때

* 다이나믹 프로그래밍의 전형적인 형태는 바텀업 방식입니다.
* 탑다운 방식은, 재귀 함수를 호출하며 메모리에 적재되는 일련의 과정으로 인해 오버헤드가 발생할 수 있습니다.
* 따라서, 가능하다면 재귀 함수를 사용하는 것 보단, 반복문을 사용하는게 오버헤드를 줄일 수 있는 방법입니다

> a258705 참고

문제를 단순화하지 않으면 복잡해질 수 있는게 DP 문제이다.
> a214289


3. 기록하는 방법도 있음
ex) boolean[]


4. 큐 + for문을 이용해 재귀를 피할 수 있다
boolean[] + queue이용

좌표를 이동하며 방문할 경우 큐에 기록하며 진행할 수 있다....


5. float, double소수점 연산은 값이 정확하지 않음..

* for문에서 직접 계산 x > 함수로뺀다
public double getHDegree(int s) {
    return (30 * (h1 % 12) + (m1 / 2d) + (s1 + s) * (1 / 120d)) % 360;
}

* d = (d*10+ 0.1d*10) / 10; 같이 정수계산 한다.


6. 유용한자료구조
PriorityQueue
Queue



7. xCy
ex)
public void recur(int s, int n, int k, ArrayList list) {
    for (int i = s; i < k; i++) {
        PriorityQueue q = (PriorityQueue) list.get(i);
        q.add(0);
        recur(i, n-1, k, list);
        q.poll();
    }
}



8. union-find 알고리즘

요소 A, B가 같은 그룹인지? 찾을때


9. dfs 깊이우선탐색
a150365


10. 약수의 갯수
a138475 (소인수분해 방법)


11. 부분배열 투포인터
a178870